function [full_grid] = MERGE_SUBGRIDS(proc_count, overlap, file_count, output_freq)
% Combines multiple subgrids generated by code using the EZ_PARALLEL
% library into a single grid.
% Input Key:
%   - proc_count: The number of processors used for the simulation.
%   - overlap: The amount of overlap required by the time-stepping scheme.
%   - file_count: The number of output files to merge.
%   - output_freq: The number of steps between consecutive output files.

for file_num = 0:file_count-1
   % Handle proc 0 separately.
   file_name = sprintf('out_%08d_%03d.csv', output_freq*file_num, 0);
   subgrid = readmatrix(file_name);
   full_grid = subgrid(1:end,:);
   % Add all other sub-grids to full grid.
   for proc_id = 1:proc_count-1
       file_name = sprintf('out_%08d_%03d.csv', output_freq*file_num, proc_id);
       subgrid = readmatrix(file_name);
       full_grid = [full_grid(1:end-overlap,:); subgrid(1+overlap:end,:)];
   end
   full_grid = full_grid(:,1:end-1);
   out_file_name = sprintf('out_%08d.csv', output_freq*file_num);
   writematrix(full_grid, out_file_name);
   disp(['Wrote full grid to ' out_file_name '.']);
end

% num_files = length(filename_list(:,1));
% full_grid = readmatrix(filename_list(1,:));
% for i = 2:num_files
%     subgrid = readmatrix(filename_list(i,:));
%     full_grid = [full_grid(1:end-overlap,:); subgrid(1+overlap:end,:)];
% end
% 
% writematrix(full_grid, output_filename);
% disp(['Wrote full grid to ' output_filename '.']);

end

