~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                EZDFFTPACK V1.0                                
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A collection of wrappers by Jason L. Turner for
    
                                DFFTPACK V1.0
    A double precision clone by Hugh C. Pumphrey  of

                                FFTPACK V4 (April 1985)
    A package of FORTRAN subprograms for the fast Fourier transform of periodic 
    and other symmetric sequences by Paul N. Swarztrauber, associated with the
    National Center for Atmospheric Research in Boulder, Colorado 80307 which 
    is sponsored by the National Science Foundation.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This package consists of programs which perform fast Fourier transforms for 
both double precision complex and double precision real periodic sequences and 
certain other symmetric sequences that are listed below. Additionally, 
subroutines 20-27 are wrappers for some of these programs intended to make 
transforming 1D and 2D complex and real arrays more simple.

1.   dffti      Initialize  dfftf and dfftb.
2.   dfftf      Forward transform of a real periodic sequence.
3.   dfftb      Backward transform of a real coefficient array.

4.   dzffti     Initialize dzfftf and dzfftb.
5.   dzfftf     A simplified real periodic forward transform.
6.   dzfftb     A simplified real periodic backward transform.

7.   dsinti     Initialize dsint.
8.   dsint      Sine transform of a real odd sequence.

9.   dcosti     Initialize dcost.
10.  dcost      Cosine transform of a real even sequence.

11.  dsinqi     Initialize dsinqf and dsinqb.
12.  dsinqf     Forward sine transform with odd wave numbers.
13.  dsinqb     Unnormalized inverse of dsinqf.

14.  dcosqi     Initialize dcosqf and dcosqb.
15.  dcosqf     Forward cosine transform with odd wave numbers.
16.  dcosqb     Unnormalized inverse of dcosqf.

17.  zffti      Initialize zfftf and zfftb.
18.  zfftf      Forward transform of a double complex periodic sequence.
19.  zfftb      Unnormalized inverse of zfftf.

20.  CFFT1DF    Forward 1D transform of a double precision complex array.
21.  CFFT1DB    Backward 1D transform of a double precision complex array.
22.  CFFT2DF    Forward 2D transform of a double precision complex array.
23.  CFFT2DB    Backward 2D transform of a double precision complex array.

24.  RFFT1DF    Forward 1D transform of a double precision real array.
25.  RFFT1DB    Backward 1D transform of a double precision real array.
26.  RFFT2DF    Forward 2D transform of a double precision real array.
27.  RFFT2DB    Backward 2D transform of a double precision real array.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. SUBROUTINE dffti(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dffti initializes the array wsave which is used in both dfftf and 
dfftb. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 2*n+15. The same work 
        array can be used for both dfftf and dfftb as long as n remains 
        unchanged. Different wsave arrays are required for different values of 
        n. The contents of wsave must not be changed between calls of dfftf or 
        dfftb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. SUBROUTINE dfftf(n, r, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dfftf computes the Fourier coefficients of a real periodic sequence 
(Fourier analysis). The transform is defined below at output parameter r.

Input Parameter(s):
n       The length of the array r to be transformed. The method is most 
        efficient when n is a product of small primes. n may change so long as 
        different work arrays are provided.

r       A real array of length n which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 2*n+15. In the program 
        that calls dfftf. The wsave array must be initialized by calling 
        subroutine dffti(n, wsave) and a different wsave array must be used for 
        each different value of n. This initialization does not have to be 
        repeated so long as n remains unchanged thus subsequent
        transforms can be obtained faster than the first. The same wsave array 
        can be used by dfftf and dfftb.


Output Parameter(s):
r       r(1) = the sum from i=1 to i=n of r(i)

        if n is even set l =n/2   , if n is odd set l = (n+1)/2

          then for k = 2,...,l

             r(2*k-2) = the sum from i = 1 to i = n of

                  r(i)*cos((k-1)*(i-1)*2*pi/n)

             r(2*k-1) = the sum from i = 1 to i = n of

                 -r(i)*sin((k-1)*(i-1)*2*pi/n)

        if n is even

             r(n) = the sum from i = 1 to i = n of

                  (-1)**(i-1)*r(i)

        NOTE: This transform is unnormalized since a call of dfftf followed by 
              a call of dfftb will multiply the input sequence by n.

wsave   Contains results which must not be destroyed between calls of dfftf or 
        dfftb.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. SUBROUTINE dfftb(n, r, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dfftb computes the real periodic sequence from its Fourier 
coefficients (Fourier synthesis). the transform is defined below at output 
parameter r.

Input Parameter(s):
n       The length of the array r to be transformed. The method is most 
        efficient when n is a product of small primes. n may change so long as 
        different work arrays are provided.

r       A real array of length n which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 2*n+15. In the program 
        that calls dfftb. The wsave array must be initialized by calling 
        subroutine dffti(n, wsave) and a different wsave array must be used for 
        each different value of n. This initialization does not have to be 
        repeated so long as n remains unchanged thus subsequent
        transforms can be obtained faster than the first. The same wsave array 
        can be used by dfftf and dfftb.


Output Parameter(s):s

r       for n even and for i = 1,...,n

             r(i) = r(1)+(-1)**(i-1)*r(n)

                  plus the sum from k=2 to k=n/2 of

                   2.*r(2*k-2)*cos((k-1)*(i-1)*2*pi/n)

                  -2.*r(2*k-1)*sin((k-1)*(i-1)*2*pi/n)

        for n odd and for i = 1,...,n

             r(i) = r(1) plus the sum from k=2 to k=(n+1)/2 of

                  2.*r(2*k-2)*cos((k-1)*(i-1)*2*pi/n)

                 -2.*r(2*k-1)*sin((k-1)*(i-1)*2*pi/n)

        NOTE: This transform is unnormalized since a call of dfftf followed by 
              a call of dfftb will multiply the input sequence by n.

wsave   Contains results which must not be destroyed between calls of dfftf or 
        dfftb.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. SUBROUTINE dzffti(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dzffti initializes the array wsave which is used in both dzfftf and 
dzfftb. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 3*n+15. The same work 
        array can be used for both dzfftf and dzfftb as long as n remains 
        unchanged. Different wsave arrays are required for different values of n.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5. SUBROUTINE dzfftf(n, r, azero, a, b, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dzfftf computes the Fourier coefficients of a real periodic sequence 
(Fourier analysis). The transform is defined below at output parameters azero, 
a, and b. dzfftf is a simplified but slower version of dfftf.

Input Parameter(s):
n       The length of the array r to be transformed. The method is most 
        efficient when n is a product of small primes. 

r       A real array of length n which contains the sequence to be transformed.
        r is not destroyed.

wsave   A work array which must be dimensioned at least 3*n+15. In the program 
        that calls dzfftf, the wsave array must be initialized by calling 
        subroutine dzffti(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be 
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first. The same wsave array can be used by 
        dzfftf and dzfftb.

Output Parameter(s):
azero   The sum from i=1 to i=n of r(i)/n

a, b    For n even b(n/2)=0. and a(n/2) is the sum from i=1 to
        i=n of (-1)**(i-1)*r(i)/n

        for n even define kmax=n/2-1
        for n odd  define kmax=(n-1)/2

        then for  k=1,...,kmax

             a(k) equals the sum from i=1 to i=n of

                  2./n*r(i)*cos(k*(i-1)*2*pi/n)

             b(k) equals the sum from i=1 to i=n of

                  2./n*r(i)*sin(k*(i-1)*2*pi/n)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6. SUBROUTINE dzfftb(n, r, azero, a, b, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dzfftb computes a real periodic sequence from its Fourier 
coefficients (Fourier synthesis). The transform is defined below at output 
parameter r. dzfftb is a simplified but slower version of dfftb.

Input Parameter(s):
n       The length of the array r to be transformed. The method is most 
        efficient when n is a product of small primes. 

r       A real array of length n which contains the sequence to be transformed.
        r is not destroyed.

azero   The constant Fourier coefficient.

a,b     Arrays which contain the remaining Fourier coefficients These arrays 
        are not destroyed.

        The length of these arrays depends on whether n is even or
        odd.

        If n is even n/2    locations are required
        If n is odd (n-1)/2 locations are required

wsave   A work array which must be dimensioned at least 3*n+15. In the program 
        that calls dzfftb, the wsave array must be initialized by calling 
        subroutine dzffti(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be 
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first. The same wsave array can be used by 
        dzfftf and dzfftb.


Output Parameter(s):
r       If n is even define kmax=n/2
        if n is odd  define kmax=(n-1)/2

        then for i=1,...,n

             r(i)=azero plus the sum from k=1 to k=kmax of

             a(k)*cos(k*(i-1)*2*pi/n)+b(k)*sin(k*(i-1)*2*pi/n)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Complex Notation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        for j=1,...,n

        r(j) equals the sum from k=-kmax to k=kmax of

             c(k)*exp(i*k*(j-1)*2*pi/n)

        where

             c(k) = .5*cmplx(a(k),-b(k))   for k=1,...,kmax

             c(-k) = conjg(c(k))

             c(0) = azero

                  and i=sqrt(-1)

~~~~~~~~~~~~~~~~~~~~~~~~~ Amplitude - Phase Notation ~~~~~~~~~~~~~~~~~~~~~~~~~~

        for i=1,...,n

        r(i) equals azero plus the sum from k=1 to k=kmax of

             alpha(k)*cos(k*(i-1)*2*pi/n+beta(k))

        where

             alpha(k) = sqrt(a(k)*a(k)+b(k)*b(k))

             cos(beta(k))=a(k)/alpha(k)

             sin(beta(k))=-b(k)/alpha(k)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7. SUBROUTINE dsinti(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dsinti initializes the array wsave which is used in subroutine 
dsint. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed. The method is most 
        efficient when n+1 is a product of small primes.

Output Parameter(s):
wsave   A work array with at least int(2.5*n+15) locations. Different wsave 
        arrays are required for different values of n. The contents of wsave 
        must not be changed between calls of dsint.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8. SUBROUTINE dsint(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dsint computes the discrete Fourier sine transform of an odd 
sequence x(i). The transform is defined below at output parameter x.

dsint is the unnormalized inverse of itself since a call of dsint followed by 
another call of dsint will multiply the input sequence x by 2*(n+1).

The array wsave which is used by subroutine dsint must be initialized by 
calling subroutine dsinti(n, wsave).

Input Parameter(s):
n       The length of the sequence to be transformed. The method is most 
        efficient when n+1 is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array with dimension at least int(2.5*n+15). In the program that 
        calls dsint, the wsave array must be initialized by calling subroutine 
        dsinti(n, wsave) and a different wsave array must be used for each 
        different value of n. This initialization does not have to be repeated 
        so long as n remains unchanged thus subsequent transforms can be 
        obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

             x(i)= the sum from k=1 to k=n

                  2*x(k)*sin(k*i*pi/(n+1))

             a call of dsint followed by another call of
             dsint will multiply the sequence x by 2*(n+1).
             hence dsint is the unnormalized inverse
             of itself.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dsint.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9. SUBROUTINE dcosti(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dcosti initializes the array wsave which is used in subroutine 
dcost. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed. The method is most 
        efficient when n-1 is a product of small primes.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 3*n+15. Different wsave 
        arrays are required for different values of n. The contents of wsave 
        must not be changed between calls of dcost.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
10. SUBROUTINE dcost(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dcost computes the discrete Fourier cosine transform of an even 
sequence x(i). The transform is defined below at output parameter x.

dcost is the unnormalized inverse of itself since a call of dcost followed by 
another call of dcost will multiply the input sequence x by 2*(n-1). The 
transform is defined below at output parameter x.

The array wsave which is used by subroutine dcost must be initialized by 
calling subroutine dcosti(n, wsave).

Input Parameter(s):
n       The length of the sequence x. n must be greater than 1. The method is 
        most efficient when n-1 is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 3*n+15. In the program 
        that calls dcost. The wsave array must be initialized by calling 
        subroutine dcosti(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

            x(i) = x(1)+(-1)**(i-1)*x(n)

             + the sum from k=2 to k=n-1

                 2*x(k)*cos((k-1)*(i-1)*pi/(n-1))

             a call of dcost followed by another call of
             dcost will multiply the sequence x by 2*(n-1)
             hence dcost is the unnormalized inverse
             of itself.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dcost.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
11. SUBROUTINE dsinqi(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dsinqi initializes the array wsave which is used in both dsinqf and 
dsinqb. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed. The method is most 
        efficient when n is a product of small primes.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 3*n+15. The same work 
        array can be used for both dsinqf and dsinqb as long as n remains 
        unchanged. Different wsave arrays are required for different values of 
        n. The contents of wsave must not be changed between calls of dsinqf or 
        dsinqb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
12. SUBROUTINE dsinqf(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dsinqf computes the fast Fourier transform of quarter wave data. 
That is, dsinqf computes the coefficients in a sine series representation with 
only odd wave numbers. The transform is defined below at output parameter x.

dsinqb is the unnormalized inverse of dsinqf since a call of dsinqf followed by 
a call of dsinqb will multiply the input sequence x by 4*n.

The array wsave which is used by subroutine dsinqf must be initialized by 
calling subroutine dsinqi(n, wsave).

Input Parameter(s):
n       The length of the sequence to be transformed. The method is most 
        efficient when n is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 3*n+15. In the program 
        that calls dsinqf, the wsave array must be initialized by calling 
        subroutine dsinqi(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

             x(i) = (-1)**(i-1)*x(n)

                + the sum from k=1 to k=n-1 of

                2*x(k)*sin((2*i-1)*k*pi/(2*n))

             A call of dsinqf followed by a call of
             dsinqb will multiply the sequence x by 4*n.
             therefore dsinqb is the unnormalized inverse
             of dsinqf.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dsinqf or dsinqb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
13. SUBROUTINE dsinqb(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dsinqb computes the fast Fourier transform of quarter wave data. 
That is, dsinqb computes a sequence from its representation in terms of a sine 
series with odd wave numbers. The transform is defined below at output 
parameter x.

dsinqf is the unnormalized inverse of dsinqb since a call of dsinqb followed by 
a call of dsinqf will multiply the input sequence x by 4*n.

The array wsave which is used by subroutine dsinqb must be initialized by 
calling subroutine dsinqi(n, wsave).

Input Parameter(s):
n       The length of the array x to be transformed. The method is most 
        efficient when n is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 3*n+15. In the program 
        that calls dsinqb, the wsave array must be initialized by calling 
        subroutine dsinqi(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

             x(i)= the sum from k=1 to k=n of

               4*x(k)*sin((2k-1)*i*pi/(2*n))

             a call of dsinqb followed by a call of
             dsinqf will multiply the sequence x by 4*n.
             therefore dsinqf is the unnormalized inverse
             of dsinqb.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dsinqb or dsinqf.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
14. SUBROUTINE dcosqi(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dcosqi initializes the array wsave which is used in both dcosqf and 
dcosqb. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the array x to be transformed. The method is most 
        efficient when n is a product of small primes.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 3*n+15. The same work 
        array can be used for both dcosqf and dcosqb as long as n remains 
        unchanged. Different wsave arrays are required for different values of 
        n. The contents of wsave must not be changed between calls of dcosqf or 
        dcosqb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15. SUBROUTINE dcosqf(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dcosqf computes the fast Fourier transform of quarter wave data. 
That is, dcosqf computes the coefficients in a cosine series representation 
with only odd wave numbers. The transform is defined below at output parameter
x.

dcosqf is the unnormalized inverse of dcosqb since a call of dcosqf followed 
by a call of dcosqb will multiply the input sequence x by 4*n.

The array wsave which is used by subroutine dcosqf must be initialized by 
calling subroutine dcosqi(n,wsave).


Input Parameter(s):
n       The length of the array x to be transformed. The method is most 
        efficient when n is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 3*n+15 in the program 
        that calls dcosqf. The wsave array must be initialized by calling 
        subroutine dcosqi(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

             x(i) = x(1) plus the sum from k=2 to k=n of

                2*x(k)*cos((2*i-1)*(k-1)*pi/(2*n))

             A call of dcosqf followed by a call of
             cosqb will multiply the sequence x by 4*n.
             therefore dcosqb is the unnormalized inverse
             of dcosqf.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dcosqf or dcosqb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16. SUBROUTINE dcosqb(n, x, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine dcosqb computes the fast Fourier transform of quarter wave data. 
That is, dcosqb computes a sequence from its representation in terms of a 
cosine series with odd wave numbers. The transform is defined below at output 
parameter x.

dcosqb is the unnormalized inverse of dcosqf since a call of dcosqb followed by 
a call of dcosqf will multiply the input sequence x by 4*n.

The array wsave which is used by subroutine dcosqb must be initialized by 
calling subroutine dcosqi(n, wsave).

Input Parameter(s):
n       The length of the array x to be transformed. The method is most 
        efficient when n is a product of small primes.

x       An array which contains the sequence to be transformed.

wsave   A work array which must be dimensioned at least 3*n+15 in the program 
        that calls dcosqb. The wsave array must be initialized by calling 
        subroutine dcosqi(n, wsave) and a different wsave array must be used 
        for each different value of n. This initialization does not have to be
        repeated so long as n remains unchanged thus subsequent transforms can 
        be obtained faster than the first.

Output Parameter(s):
x       For i=1,...,n

             x(i)= the sum from k=1 to k=n of

               4*x(k)*cos((2*k-1)*(i-1)*pi/(2*n))

             A call of dcosqb followed by a call of
             dcosqf will multiply the sequence x by 4*n.
             therefore dcosqf is the unnormalized inverse
             of dcosqb.

wsave   Contains initialization calculations which must not be destroyed 
        between calls of dcosqf or dcosqb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
17. SUBROUTINE zffti(n, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine zffti initializes the array wsave which is used in both zfftf and 
zfftb. The prime factorization of n together with a tabulation of the 
trigonometric functions are computed and stored in wsave.

Input Parameter(s):
n       The length of the sequence to be transformed.

Output Parameter(s):
wsave   A work array which must be dimensioned at least 4*n+15. The same work 
        array can be used for both zfftf and zfftb as long as n remains 
        unchanged. Different wsave arrays are required for different values of 
        n. The contents of wsave must not be changed between calls of zfftf or 
        zfftb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18. SUBROUTINE zfftf(n, c, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine zfftf computes the forward complex discrete Fourier transform 
(the Fourier analysis). Equivalently , zfftf computes the Fourier coefficients 
of a complex periodic sequence. The transform is defined below at output 
parameter c.

The transform is not normalized. To obtain a normalized transform the output 
must be divided by n. Otherwise a call of zfftf followed by a call of zfftb 
will multiply the sequence by n.

The array wsave which is used by subroutine zfftf must be initialized by 
calling subroutine zffti(n, wsave).

Input Parameter(s):
n       The length of the complex sequence c. The method is more efficient when 
        n is the product of small primes.

c       A complex array of length n which contains the sequence.

wsave   A real work array which must be dimensioned at least 4n+15 in the 
        program that calls zfftf. The wsave array must be initialized by 
        calling subroutine zffti(n, wsave) and a different wsave array must be 
        used for each different value of n. This initialization does not have 
        to be repeated so long as n remains unchanged thus subsequent
        transforms can be obtained faster than the first. The same wsave array 
        can be used by zfftf and zfftb.

Output Parameter(s):
c       For j=1,...,n

           c(j)=the sum from k=1,...,n of

                 c(k)*exp(-i*(j-1)*(k-1)*2*pi/n)

                       where i=sqrt(-1)

wsave   Contains initialization calculations which must not be destroyed 
        between calls of subroutine zfftf or zfftb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19. SUBROUTINE zfftb(n, c, wsave)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Subroutine zfftb computes the backward complex discrete Fourier transform 
(the Fourier synthesis). Equivalently, zfftb computes a complex periodic 
sequence from its Fourier coefficients. The transform is defined below at 
output parameter c.

A call of zfftf followed by a call of zfftb will multiply the sequence by n.

The array wsave which is used by subroutine zfftb must be initialized by 
calling subroutine zffti(n, wsave).

Input Parameter(s):
n       The length of the complex sequence c. The method is more efficient when 
        n is the product of small primes.

c       A complex array of length n which contains the sequence.

wsave   A real work array which must be dimensioned at least 4n+15 in the 
        program that calls zfftb. The wsave array must be initialized by 
        calling subroutine zffti(n, wsave) and a different wsave array must be 
        used for each different value of n. This initialization does not have 
        to be repeated so long as n remains unchanged thus subsequent
        transforms can be obtained faster than the first. The same wsave array 
        can be used by zfftf and zfftb.

Output Parameter(s):
c       For j=1,...,n

           c(j)=the sum from k=1,...,n of

                 c(k)*exp(i*(j-1)*(k-1)*2*pi/n)

                       where i=sqrt(-1)

wsave   Contains initialization calculations which must not be destroyed 
        between calls of subroutine zfftf or zfftb.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20. SUBROUTINE CFFT1DF(dim1, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine CFFT1DF computes the forward 1D Fourier transform of a double 
precision complex array by calling zffti and zfftf. This transform is not 
normalized.

Input Parameter(s):
dim1   The size of the double precision complex array matrix.

matrix The double precision complex array to be transformed.

Output Parameter(s):
matrix The transformed double precision complex array. 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21. SUBROUTINE CFFT1DB(dim1, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine CFFT1DB computes the backward 1D Fourier transform of a double 
precision complex array by calling zffti and zfftb. This transform is 
normalized.

Input Parameter(s):
dim1   The size of the double precision complex array matrix.

matrix The double precision complex array to be transformed.

Output Parameter(s):
matrix The transformed double precision complex array. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
22. SUBROUTINE CFFT2DF(dim1, dim2, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine CFFT2DF computes the forward 2D Fourier transform of a double 
precision complex array by calling zffti and zfftf. It first transforms matrix
along its first dimension, transposes it, then transforms the transpose matrix
along its first dimension, and transposes it back. This transform is not 
normalized.

Input Parameter(s):
dim1,dim2   The dimensions of the double precision complex array matrix.

matrix      The double precision complex array to be transformed.

Output Parameter(s):
matrix      The transformed double precision complex array. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23. SUBROUTINE CFFT2DB(dim1, dim2, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine CFFT2DB computes the backward 2D Fourier transform of a double 
precision complex array by calling zffti and zfftf. It first transforms matrix
along its first dimension, transposes it, then transforms the transpose matrix
along its first dimension, and transposes it back. This transform is  
normalized.

Input Parameter(s):
dim1,dim2   The dimensions of the double precision complex array matrix.

matrix      The double precision complex array to be transformed.

Output Parameter(s):
matrix      The transformed double precision complex array. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
24. SUBROUTINE RFFT1DF(dim1, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine RFFT1DF computes the forward 1D Fourier transform of a double 
precision array by calling dffti and dfftf. This transform is not 
normalized.

Input Parameter(s):
dim1   The size of the double precision array matrix.

matrix The double precision array to be transformed.

Output Parameter(s):
matrix The transformed double precision array. 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
25. SUBROUTINE RFFT1DB(dim1, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine RFFT1DB computes the backward 1D Fourier transform of a double 
precision array by calling dffti and dfftb. This transform is 
normalized.

Input Parameter(s):
dim1   The size of the double precision array matrix.

matrix The double precision array to be transformed.

Output Parameter(s):
matrix The transformed double precision array. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
26. SUBROUTINE RFFT2DF(dim1, dim2, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine RFFT2DF computes the forward 2D Fourier transform of a double 
precision array by calling dffti and dfftf. It first transforms matrix
along its first dimension, transposes it, then transforms the transpose matrix
along its first dimension, and transposes it back. This transform is not 
normalized.

Input Parameter(s):
dim1,dim2   The dimensions of the double precision array matrix.

matrix      The double precision array to be transformed.

Output Parameter(s):
matrix      The transformed double precision array. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
27. SUBROUTINE RFFT2DB(dim1, dim2, matrix)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subroutine RFFT2DB computes the backward 2D Fourier transform of a double 
precision array by calling dffti and dfftf. It first transforms matrix along 
its first dimension, transposes it, then transforms the transpose matrix along 
its first dimension, and transposes it back. This transform is normalized.

Input Parameter(s):
dim1,dim2   The dimensions of the double precision array matrix.

matrix      The double precision array to be transformed.

Output Parameter(s):
matrix      The transformed double precision array. 
